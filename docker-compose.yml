# docker-compose.yml (Orchestration Version)
version: '3.8'

services:
  db:
    image: mysql:8.0
    container_name: my_mysql_cosmic_catalyst
    restart: always
    env_file:
      - .env # Uses generated MYSQL_ROOT_PASSWORD, MYSQL_DATABASE, MYSQL_USER, MYSQL_PASSWORD
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3307:3306" # Host port 3307 mapped to container 3306
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u${MYSQL_USER}", "-p${MYSQL_PASSWORD}"] # Use user/pass from env
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my_custom_network

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant_server
    restart: always
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      # QDRANT__LOG_LEVEL: ${LOG_LEVEL:-INFO} # Get LOG_LEVEL from .env
      # Explicitly set if not in .env or use compose interpolation
      QDRANT__LOG_LEVEL: ${LOG_LEVEL:-INFO}
    networks:
      - my_custom_network

  api:
    image: thanosprime/entities-api-api:latest # Pre-built image
    container_name: fastapi_cosmic_catalyst
    restart: always
    env_file:
      - .env # Uses generated DB URL, secrets, other settings
    environment:
      # --- REMOVED DATABASE_URL --- (Will be read from .env generated by script)
      # DATABASE_URL: mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE}
      SANDBOX_SERVER_URL: http://sandbox:8000 # Internal URL using service name
      QDRANT_URL: http://qdrant:6333        # Internal URL using service name
      ASSISTANTS_BASE_URL: http://api:9000     # Internal URL (API potentially calling itself)
      PYTHONUNBUFFERED: "1"                 # Good practice
      # Other variables like SECRET_KEY, ADMIN_API_KEY will be read from .env
    ports:
      - "9000:9000"
    depends_on:
      db:
        condition: service_healthy
      sandbox:
        condition: service_started # Sandbox may not have a reliable healthcheck easily defined
      qdrant:
        condition: service_started # Qdrant startup is usually fast
    networks:
      - my_custom_network

  sandbox:
    image: thanosprime/entities-api-sandbox:latest # Pre-built image
    container_name: sandbox_api
    restart: always
    env_file:
      - .env # Uses DB connection details if needed, maybe SIGNED_URL_SECRET
    cap_add:
      - SYS_ADMIN
    security_opt:
      - seccomp:unconfined
    devices:
      - /dev/fuse
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - /tmp/sandbox_logs:/app/logs # Example volume for logs
    networks:
      - my_custom_network

  samba:
    image: dperson/samba
    container_name: samba_server
    restart: unless-stopped
    env_file:
      - .env # Uses generated SAMBA_USER, SAMBA_PASSWORD etc.
    environment:
      # These will primarily pull from .env now, using defaults if vars are missing there
      USERID: ${SAMBA_USERID:-1000}
      GROUPID: ${SAMBA_GROUPID:-1000}
      TZ: ${TZ:-UTC}
      USER: "${SAMBA_USER};${SAMBA_PASSWORD}" # Rely on .env for user/pass
      SHARE: "${SAMBA_SHARE_NAME};/samba/share;yes;no;no;${SAMBA_USER}" # Rely on .env
      GLOBAL: "server min protocol = NT1\nserver max protocol = SMB3"
    ports:
      - "139:139"
      - "1445:445" # Map host 1445 to container 445
    volumes:
      - ${SHARED_PATH}:/samba/share # SHARED_PATH comes from .env
    networks:
      - my_custom_network

volumes:
  mysql_data:
    driver: local
  qdrant_storage:
    driver: local

networks:
  my_custom_network:
    driver: bridge